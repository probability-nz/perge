import e from"peerjs";import{Connection as t,init as n,DocSet as o}from"automerge";var r=function(){function r(t,n){var r=this;void 0===n&&(n={}),this._connections={},this._actorId=t,this.peer=n.peer||new e(this._actorId),this.docSet=n.docSet||new o,this._encode=n.encode||JSON.stringify,this._decode=n.decode||JSON.parse,this.peer.on("connection",function(e){r._connections[e.peer]||r.connect(e.peer,e)})}var c=r.prototype;return c.connect=function(e,n,o){var r=this;if(this._connections[e])return this.peer.connections[e];var c=n||this.peer.connect(e,o),i=this._connections[e]=new t(this.docSet,function(e){c.send(r._encode(e))}),s=function(e){return i.receiveMsg(r._decode(e))},u=function(){c.off("data",s),r._connections[e]&&(delete r._connections[e],i.close())};return c.on("data",s),c.on("close",u),c.on("error",u),i.open(),c},c.get=function(e){return this.docSet.getDoc(e)||n(this._actorId)},c.select=function(e){var t=this;return function(n){var o=n.apply(void 0,[t.get(e)].concat([].slice.call(arguments,1)));return t.docSet.setDoc(e,o),o}},c.subscribe=function(e,t){var n=this;if("function"==typeof e)return this.docSet.registerHandler(e),function(){return n.docSet.unregisterHandler(e)};if("string"==typeof e&&t){var o=function(n,o){n===e&&t(o)};return this.docSet.registerHandler(o),function(){return n.docSet.unregisterHandler(o)}}return function(){}},r}();export default r;
//# sourceMappingURL=index.m.js.map
